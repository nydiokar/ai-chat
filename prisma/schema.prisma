generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model Message {
  id              Int          @id @default(autoincrement())
  content         String
  role            String
  createdAt       DateTime     @default(now())
  conversationId  Int
  tokenCount      Int?
  discordUserId   String?
  discordUsername String?
  conversation    Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  @@index([conversationId, createdAt])
  @@index([discordUserId])
}

model Conversation {
  id               Int       @id @default(autoincrement())
  model            String
  title            String?
  summary          String?
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  tokenCount       Int       @default(0)
  discordChannelId String?
  discordGuildId   String?
  messages         Message[]
  session          Session?
  tasks            Task[]

  @@index([createdAt])
  @@index([discordGuildId, discordChannelId])
}

model Session {
  id             Int          @id @default(autoincrement())
  conversationId Int          @unique
  discordUserId  String
  createdAt      DateTime     @default(now())
  lastActivity   DateTime     @default(now())
  isActive       Boolean      @default(true)
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  @@index([discordUserId])
  @@index([lastActivity])
}

model MCPServer {
  id        String    @id
  name      String
  version   String
  status    String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  tools     MCPTool[]
}

model MCPTool {
  id          String          @id
  serverId    String
  name        String
  description String
  isEnabled   Boolean         @default(true)
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
  server      MCPServer       @relation(fields: [serverId], references: [id], onDelete: Cascade)
  context     MCPToolContext?
  usage       MCPToolUsage[]

  @@unique([serverId, name])
  @@index([serverId])
}

model MCPToolContext {
  id            Int      @id @default(autoincrement())
  toolId        String   @unique
  contextData   Json
  lastRefreshed DateTime @default(now())
  refreshCount  Int      @default(0)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  tool          MCPTool  @relation(fields: [toolId], references: [id], onDelete: Cascade)

  @@index([toolId])
}

model MCPToolUsage {
  id             Int      @id @default(autoincrement())
  toolId         String
  conversationId Int
  input          Json?
  output         String?
  error          String?
  duration       Int
  status         String
  createdAt      DateTime @default(now())
  mcpTool        MCPTool  @relation(fields: [toolId], references: [id])

  @@index([toolId])
  @@index([conversationId])
  @@index([createdAt])
}

model User {
  id            String   @id
  username      String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  isActive      Boolean  @default(true)
  preferences   Json?
  assignedTasks Task[]   @relation("TaskAssignee")
  tasks         Task[]

  @@index([username])
}

enum TaskStatus {
  OPEN
  IN_PROGRESS
  COMPLETED
  CANCELLED
  BLOCKED
}

enum TaskPriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

model Task {
  id             Int           @id @default(autoincrement())
  title          String
  description    String
  status         TaskStatus    @default(OPEN)
  priority       TaskPriority  @default(MEDIUM)
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  dueDate        DateTime?
  completedAt    DateTime?
  creatorId      String
  assigneeId     String?
  conversationId Int?
  tags           Json
  metadata       Json?
  parentTaskId   Int?
  parentTask     Task?         @relation("SubTasks", fields: [parentTaskId], references: [id])
  subTasks       Task[]        @relation("SubTasks")
  conversation   Conversation? @relation(fields: [conversationId], references: [id])
  assignee       User?         @relation("TaskAssignee", fields: [assigneeId], references: [id])
  creator        User          @relation(fields: [creatorId], references: [id])

  @@index([creatorId])
  @@index([assigneeId])
  @@index([status])
  @@index([dueDate])
  @@index([conversationId])
}
